name: Thumbnails rendering and pages build
on:
  push:
    branches: [master]
  schedule:
    - cron: '6 22 */3 * *'
  workflow_dispatch:
    inputs:
      force_rebuild_docker:
        description: "Rebuild Docker image"
        type: boolean
        required: false
        default: false
      force_recapture:
        description: "Capture images"
        type: boolean
        required: false
        default: false

permissions:
  contents: read
jobs:
  filter:
    runs-on: ubuntu-latest
    outputs:
      docker_build: ${{ steps.filter.outputs.Dockerfile }}
      render: ${{ steps.filter.outputs.renderer }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v3
      id: filter
      with:
        filters: |
          Dockerfile:
            - 'Dockerfile'
          renderer:
            - 'renderer/**'
            - 'metadata.json'
  build-and-push-image:
    runs-on: ubuntu-latest
    needs: filter
    if: needs.filter.outputs.docker_build == 'true' || inputs.force_rebuild_docker == 'true'
    permissions:
      contents: read
      packages: write # Required to push to GitHub Container Registry
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }} # e.g., ghcr.io/your-org/your-repo
          tags: |
            type=raw,value=latest
            type=sha,prefix=sha-,format=long # Adds a tag like 'sha-abcdef123...' for specific commit
            type=ref,event=branch # E.g., 'main'

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Looks for Dockerfile in the root of the repo
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha # Use GitHub Actions cache for layers
          cache-to: type=gha,mode=max # Store layers back to GitHub Actions cache for subsequent builds
  capture-images:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    needs: [build-and-push-image, filter]
    if: |
      always() && 
      (needs.build-and-push-image.result == 'success' || needs.build-and-push-image.result == 'skipped') &&
      (needs.filter.outputs.render == 'true' || github.event_name == 'schedule' || inputs.force_recapture == 'true' )
    permissions:
      contents: read
      packages: read
    container:
      image: ghcr.io/${{ github.repository }}:latest
    steps:
    - uses: actions/checkout@v4
 
    - name: Install dependencies
      run: "npm ci && mkdir images"
      working-directory: ./renderer
    - name: Find chromium
      run: |
        CMD_OUT=$(which chromium)
        if [ -z "$CMD_OUT" ]; then
          CMD_OUT=$(which chromium-browser)
        fi
        echo "CHROMIUM_PATH=$CMD_OUT" >> $GITHUB_ENV
    - name: Run task
      env:
        WEBGL_WORKAROUND: amogus
      run: node main.ts ../metadata.json images DEBUG
      working-directory: ./renderer
    - name: Roll a Windows Spotlight background for fun
      run: node spotlight.ts
      working-directory: ./renderer

    - name: Delete old images artifact
      uses: philips-labs/action-delete-artifacts@v1.0.0
      with:
          workflow: puppet.yml
          # becausw this delete all specified artifacts, we need to run this step beforehand
          name: wplace-images
          workflow_conclusion: success
      # if it doesnt exist either this is first run or skill issue
      continue-on-error: true
    - name: Upload images
      uses: actions/upload-artifact@v4
      with:
        name: wplace-images
        path: renderer/images

  # The GitHub Pages
  # Build job
  build:
    runs-on: ubuntu-latest
    needs: capture-images
    if: |
      always() && 
      (needs.capture-images.result == 'success' || needs.capture-images.result == 'skipped')
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get images (from latest run)
        if: needs.capture-images.result == 'skipped'
        uses: dawidd6/action-download-artifact@v3
        with:
          # This is the name of the artifact uploaded in the 'generator' job
          name: wplace-images 
          
          # Crucial: Search for the last run that successfully created the artifact
          workflow: puppet.yml 
          workflow_conclusion: completed
          branch: ${{ github.ref_name }}
          check_artifacts: true
          search_artifacts: true
          
          # Optional: Define the local path where the files will be downloaded
          path: ./assets/images 
      - name: Get images (from this run)
        if: needs.capture-images.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: wplace-images
          path: ./assets/images

      - uses: subic/ghaction-thumbnails@master
        with: 
          source: 'assets/images' 
          output: 'assets/thumbnails' 
          sizes: 480
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site

      # Just to be safe we'll be writing vite files after jekyll
      # Future: nvm it fucking blocks vite from deleting a file
      # Future 2: ok vite deletes the folder
      - name: Fix output dir permissions because vite wants to delete the output assets for some reason
        run: |
          sudo chown -R $(id -u):$(id -g) ./_site
          sudo chmod -R u+rwX ./_site
      - name: Build Fluent UI bundle
        run: | 
          npm ci
          npm run build
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    # it would be very concerning if this is the way
    if: |
      always() && 
      (needs.build.result == 'success')
    # ofc if its skipped wheres the artifact for me
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
